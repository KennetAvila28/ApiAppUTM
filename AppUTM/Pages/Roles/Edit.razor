@page "/Roles/Edit/{Id:int}"
@using System.Linq
@inject NavigationManager navigation
@inject HttpClient Http
@inject NotificationService NotificationService
<h1>Editar un Rol</h1>
<div class="container-fluid">
    <div class="form-group">
        <RadzenLabel Text="Nombre:" />
        <RadzenTextBox ShowUpDown="false" TValue="int" @bind-Value="@_oRoleForUpdateDto.Nombre" Style="width: auto;"></RadzenTextBox>
    </div>
    <div class="form-group">
        <div class="form-group mt-4">
            <button class="btn btn-success ml-2" @onclick="Post" role="button" type="submit">Editar rol</button>
            <button class="btn btn-secondary ml-2" @onclick="Cancel" role="button">Cancelar</button>
        </div>
        <button class="btn btn-danger ml-2" @onclick="Delete" role="button">Eliminar</button>
    </div>
</div>

@code {
    RoleForUpdateDto _oRoleForUpdateDto = new();
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _oRoleForUpdateDto = await GetExtensions.GetRoleById(Http, Id);
    }

    async Task Delete()
    {
        var user = await Http.DeleteAsync("Roles/" + Id);
        NotificationExtensions.ShowNotification(NotificationService, user.IsSuccessStatusCode ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Rol eliminado", Duration = 3000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "No se pudo eliminar el rol", Duration = 3000 });
        navigation.NavigateTo("/roles");
    }

    public async Task Post()
    {
        if (_oRoleForUpdateDto != null)
        {
            var role = await Http.PutAsJsonAsync("Roles/" + Id, _oRoleForUpdateDto);
            NotificationExtensions.ShowNotification(NotificationService, role.IsSuccessStatusCode ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Rol Actualizado", Duration = 3000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "No se pudo actualizar el rol", Duration = 3000 });
            navigation.NavigateTo("/Roles");
        }
        else
            NotificationExtensions.ShowNotification(NotificationService, new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "permiso no seleccionado", Detail = "selecciona un permiso", Duration = 3000 });
    }
    void Cancel()
    {
        navigation.NavigateTo("/Roles");
    }
}