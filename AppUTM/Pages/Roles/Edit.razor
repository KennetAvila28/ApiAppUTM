@page "/Roles/Edit/{Id:int}"
@inject NavigationManager navigation
@inject HttpClient Http
@inject NotificationService NotificationService
@if (Authorize)
{
    <h1>Editar un Rol</h1>
    <div class="container-fluid">
        <div class="form-group mb-5">
            <RadzenLabel Text="Nombre:" />
            <RadzenTextBox ShowUpDown="false" TValue="int" @bind-Value="@_oRoleForUpdateDto.Nombre" Style="width: auto;"></RadzenTextBox>
        </div>
        <div class="form-group">
            <div class="form-group mt-4">
                <button class="btn btn-success" @onclick="Post" role="button" type="submit">Editar rol</button>
                <button class="btn btn-danger ml-2" @onclick="Delete" role="button">Eliminar</button>
                <button class="btn btn-secondary ml-2" @onclick="Cancel" role="button">Cancelar</button>
            </div>
        </div>
    </div>
    <RoleModuleList Id="@Id" />

    <div class="container mt-3">
        <div class="d-flex mb-3">
            <h1 class="mx-auto">Lista de modulos</h1>
        </div>
        <RadzenDataGrid AllowColumnResize="true" AllowFiltering="true" FilterMode="FilterMode.Simple" AllowPaging="true" AllowSorting="true" Data="_oRoleForUpdateDto.RoleModules.AsEnumerable()" PageSize="10" TItem="RoleModule">
            <Columns>
                <RadzenDataGridColumn TItem="RoleModule" Property="Module" Title="Modulo">
                    <Template Context="data">
                        @($"{data.Module.Name}")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="RoleModule" Property="Lectura" Title="Lectura">
                    <Template Context="data">
                        <RadzenCheckBox TValue="bool" Value="@(data.Read)" Change="(args =>UpdateRead(args,data.Write,data.ModuleId,Id)) " />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="RoleModule" Property="Escritura" Title="Escritura">
                    <Template Context="data">
                        <RadzenCheckBox TValue="bool" Value="@(data.Write)" Change="(args =>UpdateWrite(args,data.ModuleId,Id))" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="RoleModule" Title="Acciones">
                    <Template Context="data">
                        <RadzenButton Text="Eliminar" ButtonStyle="ButtonStyle.Danger" Click="() => Remove(data.ModuleId)" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
}
else
{
    <Unauthorized />
}

@code {
    RoleForUpdateDto _oRoleForUpdateDto = new();
    [Parameter]
    public int Id { get; set; }
    public bool Authorize;
    protected override async Task OnInitializedAsync()
    {
        var userDb = IsDataNull.CreateInstanceIfIsNull(await _localStorage.GetValue<UserReturn>(ValueKeys.User));
        if (userDb.UserRoles.Any(x => x.Role.RoleModules.Any(module => module.ModuleId == 2 && module.Write)))
        {
            Authorize = true;
        }
        _oRoleForUpdateDto = await GetExtensions.GetRoleById(Http, Id);
    }

    async Task Delete()
    {
        var user = await Http.DeleteAsync("Roles/" + Id);
        NotificationExtensions.ShowNotification(NotificationService, user.IsSuccessStatusCode ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Rol eliminado", Duration = 3000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "No se pudo eliminar el rol", Duration = 3000 });
        navigation.NavigateTo("/roles");
    }

    async Task Remove(int moduleId)
    {
        var user = await Http.DeleteAsync("RoleModule/" + moduleId + "/" + Id);
        NotificationExtensions.ShowNotification(NotificationService, user.IsSuccessStatusCode ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "acceso eliminado", Duration = 3000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "No se pudo eliminar el acceso", Duration = 3000 });
        navigation.NavigateTo("/Roles");
    }

    public async Task Post()
    {
        if (!string.IsNullOrEmpty(_oRoleForUpdateDto.Nombre))
        {
            var role = await Http.PutAsJsonAsync("Roles/" + Id, _oRoleForUpdateDto);
            NotificationExtensions.ShowNotification(NotificationService, role.IsSuccessStatusCode ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Rol Actualizado", Duration = 3000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "No se pudo actualizar el rol", Duration = 3000 });
            navigation.NavigateTo("/Roles");
        }
        else
            NotificationExtensions.ShowNotification(NotificationService, new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "permiso no seleccionado", Detail = "selecciona un permiso", Duration = 3000 });
    }

    async Task UpdateRead(bool value, bool write, int moduleId, int roleId)
    {
        if (value)
        {
            var roleModuleForUpdate = new RoleModule
            {
                Read = true,
                Write = write

            };

            var role = await Http.PutAsJsonAsync("RoleModule/" + moduleId + "/" + roleId, roleModuleForUpdate);
            NotificationExtensions.ShowNotification(NotificationService, role.IsSuccessStatusCode ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Permiso actualizado", Duration = 3000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "No se pudo actualizar el permiso", Duration = 3000 });
            await OnInitializedAsync();
        }
        else
            await Remove(moduleId);
    }

    async Task UpdateWrite(bool value, int moduleId, int roleId)
    {
        var roleModuleForUpdate = new RoleModule
        {
            Read = true,
            Write = value

        };

        var role = await Http.PutAsJsonAsync("RoleModule/" + moduleId + "/" + roleId, roleModuleForUpdate);
        NotificationExtensions.ShowNotification(NotificationService, role.IsSuccessStatusCode ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Permiso actualizado", Duration = 3000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "No se pudo actualizar el permiso", Duration = 3000 });
        await OnInitializedAsync();

    }

    void Cancel()
    {
        navigation.NavigateTo("/Roles");
    }
}