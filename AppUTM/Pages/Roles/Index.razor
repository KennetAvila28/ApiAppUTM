@page "/Roles"
@using Microsoft.AspNetCore.Authorization
@using AppUTM.Models.Permissions
@using System.Linq
@attribute [Authorize]
@inject HttpClient _http
@inject NavigationManager navigation
@inject NotificationService NotificationService

@if (_roles != null)
{
    <div class="container mt-3">
        <div class="d-flex">
            <h1 class="mx-auto">Lista de roles</h1>
            <RadzenButton class="mx-auto" Text="Agregar" ButtonStyle="ButtonStyle.Success" Click=@(() => navigation.NavigateTo($"/Roles/Create")) />
        </div>
        <table class="table">
            <thead class="bg-light text-center">
                <tr>
                    <th scope="col">Nombre</th>
                    @foreach (var permission in _permissions)
                    {
                        <th scope="col">@permission.Module</th>
                    }
                    <th scope="col">Acciones</th>
                </tr>
            </thead>
            <tbody class="text-center">
                @foreach (var role in _roles)
                {
                    <tr>
                        <td>@role.Nombre</td>
                        @foreach (var permission in _permissions)
                        {
                            if (role.RolePermissions.Any(r => r.PermissionId == permission.Id))
                            {
                                <td><input class="form-check-input" type="checkbox" checked="checked" onclick="javascript: return false;" /></td>

                            }
                            else
                            {
                                <td><input class="form-check-input" type="checkbox" onclick="javascript: return false;" /></td>
                            }

                        }
                        <td> <RadzenButton class="mx-auto" Text="Editar" ButtonStyle="ButtonStyle.Success" Click=@(() => navigation.NavigateTo($"/Roles/Edit/{role.Id}")) /></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

}
else
{
    <Spinner />
}

@code
{
    private IList<PermissionReturn> _permissions;
    private IList<RoleReturn> _roles;
    protected override async Task OnInitializedAsync()
    {
        _permissions = await GetExtensions.GetAllPermissions(_http);
        _roles = await GetExtensions.GetAllRoles(_http);
        await Task.Delay(1000);
    }
}