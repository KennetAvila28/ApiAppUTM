@page "/Events/Edit/{Id:int}"
@inject NavigationManager navigation
@inject HttpClient Http
@inject NotificationService NotificationService
@if (Authorize)
{
    <h1>Actualizar un evento</h1>
    <div class="container">
        <RadzenTemplateForm TItem="EventForUpdateDto" Data="@_oEventForUpdateDto" Submit="@(OnSubmit)" InvalidSubmit="OnInvalidSubmit">
            <div class="container mb-3">
                <div class="row">
                    <RadzenImage Path="@_imgUrl" class="img-thumbnail mx-auto" Style="width: 256px;height: 256px;" />
                    <InputFile OnChange="@OnFileSelection" class="form-control mt-3" />
                </div>
            </div>

            <div class="form-group mb-3 mx-auto">
                <RadzenLabel Text="Titulo:" />
                <RadzenTextBox Name="Title" @bind-Value="@_oEventForUpdateDto.Title" Style="width: auto;" />
                <RadzenRequiredValidator Component="Title" Text="El titulo es requerido" Popup="true" Style="position: absolute" />
                <RadzenLabel Text="Fecha de inicio:" />
                <RadzenDatePicker @bind-Value="@_oEventForUpdateDto.StartDate" Name="StartDate" TValue="DateTime" ShowTime="true" DateFormat="MM/dd/yyyy HH:mm" />
                <RadzenRequiredValidator Component="StartDate" Text="Seleccina una fecha de inicio" Style="position: absolute" Popup="true" />
                <RadzenLabel Text="Fecha de termino:" />
                <RadzenDatePicker @bind-Value="@_oEventForUpdateDto.EndDate" Name="EndDate" TValue="DateTime" ShowTime="true" DateFormat="MM/dd/yyyy HH:mm" />
                <RadzenRequiredValidator Component="EndDate" Text="Seleccina una fecha de inicio" Style="position: absolute" Popup="true" />
            </div>
            <div class="form-group mb-3">
                <RadzenLabel Text="Coordinacion:" />
                <RadzenDropDown @bind-Value="_oEventForUpdateDto.AuthorId" Name="Coordination" TValue="int" Data="_coordinations" TextProperty="@nameof(CoordinationReturn.Nombre)" ValueProperty="@nameof(CoordinationReturn.Id)" />
                <RadzenRequiredValidator Component="Coordination" Text="Elige una coordinacion" Popup="true" Style="position: absolute" />
            </div>

            <div class="form-group mt-4">
                <RadzenCheckBox @bind-Value="@_oEventForUpdateDto.IsSuggest" TValue="bool" /><RadzenLabel Text="Sugerido" />
                <RadzenCheckBox @bind-Value="@_oEventForUpdateDto.IsActivity" TValue="bool" /><RadzenLabel Text="Actividad" />
            </div>
            <div class="form-group  mb-3">
                <RadzenHtmlEditor @bind-Value="@_oEventForUpdateDto.Content" style="height: 500px; margin-bottom: 1rem;" />
            </div>
            <div class="form-group mt-4">
                <div>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" ButtonType="ButtonType.Submit" Text="Actualizar evento" />
                    <RadzenButton Text="Cancelar" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Light" Click="@(Cancel)" />
                </div>
            </div>
        </RadzenTemplateForm>
    </div>
}
else
{
    <Unauthorized />
}
@code {
    [Parameter]
    public int Id { get; set; }
    EventForUpdateDto _oEventForUpdateDto = new();
    IEnumerable<CoordinationReturn> _coordinations;
    string _imgUrl = string.Empty;
    public bool Authorize;
    protected override async Task OnInitializedAsync()
    {
        var userDb = IsDataNull.CreateInstanceIfIsNull(await _localStorage.GetValue<UserReturn>(ValueKeys.User));
        if (userDb.UserRoles.Any(x => x.Role.RoleModules.Any(module => module.ModuleId == 1 && module.Write)))
        {
            Authorize = true;
        }
        _oEventForUpdateDto = await GetExtensions.GetEventById(Http, Id);
        _imgUrl = $"data:data:image/png;base64,{_oEventForUpdateDto.Image ?? string.Empty}";
        _coordinations = await GetExtensions.GetAllCoordinations(Http);

    }

    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {

        try
        {
            string imageType = e.File.ContentType;
            _imgUrl = $"data:{imageType};base64,{await ImageHelper.ImageToBase64(e)}";
            _oEventForUpdateDto.Image = await ImageHelper.ImageToBase64(e);
        }
        catch (Exception ex)
        {
            NotificationExtensions.ShowNotification(NotificationService, new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "No se pudo cargar la imagen", Detail = $"{ex.Message}", Duration = 3000 });
        }
    }
    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        NotificationExtensions.ShowNotification(NotificationService, new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Completa los campos requeridos", Duration = 3000 });
    }
    public async Task OnSubmit()
    {
        try
        {
            var eventMessage = await Http.PutAsJsonAsync("Event/" + Id, _oEventForUpdateDto);
            navigation.NavigateTo("/Events");
            NotificationExtensions.ShowNotification(NotificationService, eventMessage.IsSuccessStatusCode ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Evento actualizado con exito", Duration = 3000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "No se pudo actualizar el evento", Duration = 3000 });

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            throw;
        }
    }
    void Cancel()
    {
        navigation.NavigateTo("/Events");
    }
}