@page "/Users/Create"
@inject NavigationManager navigation
@inject HttpClient Http
@inject GraphServiceClient client
@inject NotificationService NotificationService
@if (Authorize)
{
    <h1>Crear un Usuario</h1>
    <EditForm Model="@searchWorker">
        <div class="form-group">
            <label>Correo Institucional</label>
            <InputText class="form-control col-md-5" @bind-Value="searchWorker.Email" required></InputText>
            <button type="submit" @onclick="_searchWorker" class="btn btn-primary mt-3" role="button">Buscar</button>
        </div>
    </EditForm>
    @if (_normalizedUser != null)
    {
        <div class="row form-group">
            <RadzenDropDown Change="@(_selectUser)" Data="@_normalizedUser" Placeholder="Selecciona un empleado" Style="width: auto;" TextProperty="@nameof(UserCreate.Correo)" TValue="@UserCreate" />
            <RadzenDropDown Multiple="true" Placeholder="Selecciona un rol..." Data=@_roles TextProperty="@nameof(UserRole.Nombre)" TValue="IEnumerable<UserRole>" Change=@(_selectRol) Style="width:auto;" />
            <div class="form-group mt-4">
                <button class="btn btn-success ml-2" @onclick="Post" role="button" type="submit">Crear Usuario</button>
                <button class="btn btn-secondary ml-2" @onclick="Cancel" role="button">Cancelar</button>
            </div>
        </div>
    }
}
else
{
    <Unauthorized />
}

@code {
    IList<UserCreate> _normalizedUser;
    IList<UserRole> _roles;
    IEnumerable<UserRole> userRole;
    SearchWorker searchWorker = new();
    UserCreate _oUserCreate;

    public bool Authorize;
    protected override async Task OnInitializedAsync()
    {
        var userDb = IsDataNull.CreateInstanceIfIsNull(await _localStorage.GetValue<UserReturn>(ValueKeys.User));
        if (userDb.UserRoles.Any(x => x.Role.RoleModules.Any(module => module.ModuleId == 2 && module.Write)))
        {
            Authorize = true;
        }
        _roles = await RolesToUserRoleExtension.Convert(Http);
    }

    private async Task _searchWorker()
    {
        if (!string.IsNullOrEmpty(searchWorker.Email))
        {
            var workers = await GetExtensions.GetWorkers(Http, searchWorker.Email);
            if (workers != null)
            {
                NotificationExtensions.ShowNotification(NotificationService, new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Exito", Duration = 3000 });
                _normalizedUser = await StringToListWorker.Convert(Http, workers);
            }
            else
                NotificationExtensions.ShowNotification(NotificationService, new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error al buscar", Detail = "Empleado no encontrado", Duration = 3000 });
        }
        else
            NotificationExtensions.ShowNotification(NotificationService, new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Correo vacio", Detail = "Ingresa un correo o nombre", Duration = 3000 });
    }

    void _selectUser(object user)
    {
        _oUserCreate = (UserCreate)user;
    }

    void Cancel()
    {
        navigation.NavigateTo("/Users");
    }

    void _selectRol(object role)
    {
        userRole = (IEnumerable<UserRole>)role;
        Console.WriteLine(userRole);
    }

    public async Task Post()
    {
        if (_oUserCreate != null)
        {
            _oUserCreate.UserRoles = userRole.ToList();
            var user = await Http.PostAsJsonAsync("Users", _oUserCreate);
            Console.WriteLine(user);
            NotificationExtensions.ShowNotification(NotificationService, user.IsSuccessStatusCode ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Usuario creado", Duration = 3000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "No se pudo crear al usuario", Duration = 3000 });
            navigation.NavigateTo("/Users");
        }
        else
            NotificationExtensions.ShowNotification(NotificationService, new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Usuario no seleccionado", Detail = "selecciona un usuario", Duration = 3000 });
    }
}