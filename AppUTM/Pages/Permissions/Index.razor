@page "/Permissions"
@using Microsoft.AspNetCore.Authorization
@using AppUTM.Models.Permissions
@attribute [Authorize]
@inject HttpClient _http
@inject NavigationManager navigation
@inject NotificationService NotificationService

@if (_permissions != null)
{
    <div class="container mt-3">
        <div class="d-flex mb-3">
            <h1 class="mx-auto">Lista de permisos</h1>
            <RadzenButton Text="Agregar" ButtonStyle="ButtonStyle.Success" class="mx-auto" Click=@(() => navigation.NavigateTo($"/Permissions/Create")) />
        </div>
        <RadzenDataGrid AllowColumnResize="true" AllowFiltering="true" FilterMode="FilterMode.Simple" AllowPaging="true" AllowSorting="true" Data="_permissions" PageSize="10" TItem="PermissionReturn">
            <Columns>
                <RadzenDataGridColumn TItem="PermissionReturn" Property="Module" Title="Modulo">
                    <Template Context="data">
                        @($"{data.Module}")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PermissionReturn" Title="Acciones">
                    <Template Context="data">
                        <RadzenButton Text="Editar" ButtonStyle="ButtonStyle.Success" Click=@(() => navigation.NavigateTo($"/Permissions/Edit/{data.Id}")) />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>

}
else
{
    <Spinner />
}

@code
{
    private IList<PermissionReturn> _permissions;
    private IList<RoleReturn> _roles;
    protected override async Task OnInitializedAsync()
    {
        _permissions = await GetExtensions.GetAllPermissions(_http);
        _roles = await GetExtensions.GetAllRoles(_http);
        await Task.Delay(1000);
    }
}